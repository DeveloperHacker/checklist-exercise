IDENTIFIER ::= r"[a-zA-Z_][a-zA-Z_0-9]*"

NUMBER ::= r"[0-9]+"

BOOLEAN ::= 'true' | 'false'

STRING ::= r"\"[^("|\n)]*\""

parameterDefinition ::= 'par' IDENTIFIER

valueDefinition ::= 'val' IDENTIFIER '=' expression

functionDefinition ::= 'fun' IDENTIFIER '(' IDENTIFIER{','} ')' '=' expression

definition ::= parameterDefinition | valueDefinition | functionDefinition

block ::= '{' statement{'\n'} '}'

ifStatement ::= 'if' '(' expression ')' (statement | block) ('else' (statement | block))?

statement ::= ifStatement | expression

nameExpression ::= IDENTIFIER

callExpression ::= IDENTIFIER '(' expression{','} ')'

constantExpression ::= NUMBER | BOOLEAN | STRING

ifExpression ::= 'if' '(' expression ')' expression 'else' expression

parenthesizedExpression ::= '(' expression ')'

atomicExpression ::= parenthesizedExpression
    | constantExpression
    | nameExpression
    | callExpression

multiplicationExpression = atomicExpression['*' | '/']

summationExpression ::= multiplicationExpression['+' | '-']

equalsExpression ::= summationExpression['==' | '!=' | '<' | '>' | '<=' | '>=']

logicAndExpression ::= equalsExpression['&&']

logicOrExpression ::= logicAndExpression['||']

expression ::= logicOrExpression

file ::= (definition | statement){'\n'}
